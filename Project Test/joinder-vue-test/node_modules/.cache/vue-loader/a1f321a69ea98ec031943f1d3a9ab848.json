{"remainingRequest":"C:\\Users\\dani_\\Desktop\\new new new project\\Equipo-GGLS\\Project Test\\joinder-vue-test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\dani_\\Desktop\\new new new project\\Equipo-GGLS\\Project Test\\joinder-vue-test\\src\\components\\question\\QuestionDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\dani_\\Desktop\\new new new project\\Equipo-GGLS\\Project Test\\joinder-vue-test\\src\\components\\question\\QuestionDetails.vue","mtime":1544089104197},{"path":"C:\\Users\\dani_\\Desktop\\new new new project\\Equipo-GGLS\\Project Test\\joinder-vue-test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1544064025314},{"path":"C:\\Users\\dani_\\Desktop\\new new new project\\Equipo-GGLS\\Project Test\\joinder-vue-test\\node_modules\\babel-loader\\lib\\index.js","mtime":1544064021794},{"path":"C:\\Users\\dani_\\Desktop\\new new new project\\Equipo-GGLS\\Project Test\\joinder-vue-test\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1544064100498},{"path":"C:\\Users\\dani_\\Desktop\\new new new project\\Equipo-GGLS\\Project Test\\joinder-vue-test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1544064025314},{"path":"C:\\Users\\dani_\\Desktop\\new new new project\\Equipo-GGLS\\Project Test\\joinder-vue-test\\node_modules\\vue-loader\\lib\\index.js","mtime":1544064098223}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Question from \"./Question.vue\";\r\nimport Answer from \"../answer/Answer.vue\";\r\n\r\nexport default {\r\n  props: {},\r\n  data() {\r\n    return {\r\n      question: {},\r\n      user: {},\r\n      ready: false,\r\n      answer: \"\",\r\n      answers: [],\r\n      user_id: \"\",\r\n      users:[],\r\n      answer_user:{},\r\n      test:'',\r\n    };\r\n  },\r\n  components: {\r\n    Question,\r\n    Answer\r\n  },\r\n  created() {\r\n    var Header = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + this.$auth.getToken()\r\n      }\r\n    };\r\n\r\n    this.$http.get(\"api/users\").then((response)=>{\r\n      this.users=response.body\r\n      console.log(this.users)\r\n    });\r\n\r\n    this.$http\r\n      .get(\"api/question/\" + this.$route.params.id, Header)\r\n      .then(response => {\r\n\r\n        this.question = response.body;\r\n\r\n        this.$http.get(\"api/Qanswers/\" + this.question.id).then((response) => {\r\n          this.answers = response.body;\r\n        });\r\n\r\n        this.$http\r\n          .get(\"api/users/\" + this.question.user_id, Header)\r\n          .then(response => {\r\n            this.user = response.body;\r\n            this.ready = true;    \r\n            this.user_id= this.$auth.getUserId()\r\n          });\r\n      });\r\n  },\r\n  methods: {\r\n    sendAnswer() {\r\n      let data = {\r\n        answer: this.answer,\r\n        question_id: this.question.id,\r\n        user_id: this.user_id\r\n      };\r\n\r\nconsole.log(data)\r\n      this.$http.post(\"api/answer\", data,this.Header).then(response => {\r\n        this.answers.push(response.body);\r\n        this.answer = \"\";\r\n      });\r\n    },\r\n    Rquestion(temp){\r\n      this.question = temp;\r\n\r\n    },\r\n    Danswer(){\r\n              this.$http.get(\"api/Qanswers/\" + this.question.id).then((response) => {\r\n          this.answers = response.body;\r\n        });\r\n    },\r\n    getUser(user_id){      \r\n      this.users.forEach(element => {\r\n        if(element.id==user_id){          \r\n          this.answer_user=element          \r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["QuestionDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"QuestionDetails.vue","sourceRoot":"src\\components\\question","sourcesContent":["<template>\r\n  <div>\r\n        <v-app >\r\n    <br> \r\n    <div class=\"row justify-content-center\">\r\n      <div class=\"col col-sm-8\">\r\n        <question v-if=\"ready\" :question=\"question\" :user=\"user\"></question>\r\n      </div>\r\n    </div>\r\n    <br>\r\n    <div class=\"row justify-content-center\">\r\n      <div class=\"col col-sm-8\">\r\n        <v-layout>\r\n          <v-flex>\r\n            <v-card v-if=\"question.status == 'Pendiente'\">\r\n              <v-card-title primary-title>\r\n                <div>\r\n                  <h4 class=\"headline mb-0\">Respuesta</h4>\r\n                </div>\r\n              </v-card-title>\r\n              <div>\r\n                <v-textarea  outline name=\"input-7-4\" label=\"Respuesta\" v-model=\"answer\"></v-textarea>\r\n              </div>\r\n              <v-card-actions>\r\n                <v-btn flat @click=\"sendAnswer()\" color=\"orange\">responder</v-btn>\r\n              </v-card-actions>\r\n            </v-card>\r\n          </v-flex>\r\n        </v-layout>\r\n<br>\r\n        <div v-if=\"ready\">\r\n          <div class=\"row\" v-for=\"answer in answers\" :key=\"answer.id\">\r\n            {{getUser(answer.user_id)}}\r\n              <div class=\"col col-sm-12\">\r\n                  <answer :answer=\"answer\" :user=\"user\" :question=\"question\" @Uquestion=\"Rquestion(...arguments)\" @Danswer=\"Danswer()\"></answer>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n       </v-app >\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Question from \"./Question.vue\";\r\nimport Answer from \"../answer/Answer.vue\";\r\n\r\nexport default {\r\n  props: {},\r\n  data() {\r\n    return {\r\n      question: {},\r\n      user: {},\r\n      ready: false,\r\n      answer: \"\",\r\n      answers: [],\r\n      user_id: \"\",\r\n      users:[],\r\n      answer_user:{},\r\n      test:'',\r\n    };\r\n  },\r\n  components: {\r\n    Question,\r\n    Answer\r\n  },\r\n  created() {\r\n    var Header = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + this.$auth.getToken()\r\n      }\r\n    };\r\n\r\n    this.$http.get(\"api/users\").then((response)=>{\r\n      this.users=response.body\r\n      console.log(this.users)\r\n    });\r\n\r\n    this.$http\r\n      .get(\"api/question/\" + this.$route.params.id, Header)\r\n      .then(response => {\r\n\r\n        this.question = response.body;\r\n\r\n        this.$http.get(\"api/Qanswers/\" + this.question.id).then((response) => {\r\n          this.answers = response.body;\r\n        });\r\n\r\n        this.$http\r\n          .get(\"api/users/\" + this.question.user_id, Header)\r\n          .then(response => {\r\n            this.user = response.body;\r\n            this.ready = true;    \r\n            this.user_id= this.$auth.getUserId()\r\n          });\r\n      });\r\n  },\r\n  methods: {\r\n    sendAnswer() {\r\n      let data = {\r\n        answer: this.answer,\r\n        question_id: this.question.id,\r\n        user_id: this.user_id\r\n      };\r\n\r\nconsole.log(data)\r\n      this.$http.post(\"api/answer\", data,this.Header).then(response => {\r\n        this.answers.push(response.body);\r\n        this.answer = \"\";\r\n      });\r\n    },\r\n    Rquestion(temp){\r\n      this.question = temp;\r\n\r\n    },\r\n    Danswer(){\r\n              this.$http.get(\"api/Qanswers/\" + this.question.id).then((response) => {\r\n          this.answers = response.body;\r\n        });\r\n    },\r\n    getUser(user_id){      \r\n      this.users.forEach(element => {\r\n        if(element.id==user_id){          \r\n          this.answer_user=element          \r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n</style>"]}]}